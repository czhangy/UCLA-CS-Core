1. For the subset function, I recursively checked if the elements of a were all
   members of b. If they are, a is a subset of b by definition. My
   implementation doesn't account for duplicates in the list, so it could be
   more efficient.

2. By definition of a subset, if sets are subsets of each other, they must be
   the same set. Therefore, we can use subset, reversing the parameters. This
   function has the same pitfall as the subset function.

3. I decided that the simplest way to union was to append one set to the other,
   using the @ operator. This solution fails to address the presence of
   duplicates.

4. I decided that it would simplify the code to first calculate the set
   intersection. I used the resulting set with set_union and List.filter to 
   get the result. This implementation doesn't address duplicates and requires
   the use of an extra function that may not be necessary.

5. For the computation of a fixed point, I used the definition given in the
   spec within an if-statement. I chose to not use pattern matching, as the
   stopping condition is given through a predicate rather than the parameters.

6. To filter out unreachable rules, I started by finding all reachable rules.
   To do this, I maintained a list that acted as a queue structure for a BFS of
   the ruleset. I tried to implement this function without the list, but my
   code became too unreadable. I took the first item in the list, got all the
   rules it led to, then took all the nonterminals and placed them in the 
   queue. I also deleted used rules to prevent infinite loops. Finally, I took
   the original rules and filtered out all the rules that were found to be 
   unreachable. I feel that the queue structure may have been unnecessary if I
   was willing to think through my original code more, and it may lead to
   inefficiencies. I also think it's natural to use computed_fixed_point here,
   but I didn't figure out how.