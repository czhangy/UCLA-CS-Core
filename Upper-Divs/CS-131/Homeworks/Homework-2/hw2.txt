I ended up choosing to write my make_parser implementation on the basis of
make_matcher. Logic-wise, the make_parser function is extremely similar to
make_matcher, but adds the extra step of backtracking through the parse tree
when a match is found. As a result, I thought it would be easiest to reference
my make_matcher code to implement make_parser. I decided to slightly modify the
make_matcher code with an accumulator list in order to keep track of paths 
through the final parse tree. Once that finishes executing, I can then run the
helper functions I added to the make_parser implementation to trace through the 
path and construct the tree. In addition to these functions, I also needed to
create an acceptor function that only accepts the empty suffix in order to
abide by the definition of a valid parse tree. Assuming each of these
individual components are functional, my make_parser function should be fully
capable of generating a parse tree for a given grammar. Since my make_matcher
implementation doesn't track any of the paths that it checks within the
grammar, I found that it was necessary to modify the make_matcher code rather
than reuse the functions used for make_matcher. Since all the code used was
only necesary for their respective maker function, I did my best to localize
function definitions within the definitions of make_matcher and make_parser.

I mentioned earlier that make_parser could generate a parse tree for a grammar,
assuming that all the component functions worked properly. However, the logic
used for make_matcher does have its fair share of flaws. Most importantly, it
cannot handle recursive grammars. Given the rule "Sentence -> [[N Sentence; 
N Noun]", the program will proceed to overflow the stack due to infinite 
recursion. This is because it will continously process the Sentence nonterminal
before moving forward, so it will never finish execution. If the rule has
Sentence on the right side instead, this rule processes correctly. This tells
me that, more specifically, my implementation cannot handle left-recursive
grammars. I have no insight as to how to fix this bug. It occurs, regardless of
what acceptors and fragments are passed into make_matcher. 

Another side-effect of the left-prioritization of my make_matcher is that
my matcher doesn't check rules from left to right as stated in the spec.
Instead, my matcher searches through the fragment from left to right, and the
first sub-fragment that matches a rule is used. As shown in my_grammar in my
test cases, the rule "Sentence -> [N Noun; N Verb]" will always take precedence
over the rule "Sentence -> [N Noun; N Verb; N Verb; N Punctuation]" when
accept_all is used as the acceptor. This is because any fragment that matches
the second rule will have already matched the first rule. This results in the
possible creation of unreachable rules that are meant to be reachable. For
instance, if the given example had another rule that stated "Sentence ->
[N Noun; N Verb; N Unique]", where Unique was only reachable from this rule,
my matcher would treat it as unreachable since the shorter rule would take
precedence. This could lead to some unintended side-effects. Unlike the
previous pitfall of my implementation, this error doesn't trickle through to my
make_parser implementation. This is because this error can only occur when the
suffix following the shorter rule is accepted by the acceptor. However, 
make_parser requires the suffix to be empty, so the distinction between shorter
rules and longer rules does not exist. 

The final problem I have with my implementations concerns readability.
Throughout the course of my development, I ran into a lot of issues that
required me to rewrite large segments of my code. This resulted in a lot of
Frankensteined code that is very hard to read, even for me. Looking back at my
implementation, it is legitimately hard for me to figure out what each line is
meant to do. In addition, I feel that it should've been possible to more
closely relate make_matcher and make_parser. Although I don't reuse any
functions, the logic between those 2 implementations is far too similar. If I
were able to figure out that relationship, I believe it would've made my code
much easier to understand.
