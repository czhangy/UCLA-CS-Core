psum(float a[], float p[], long n) {
	long i;
	float mid_val, last_val, val;
	last_val = p[0] = a[0];
	for (i = 1; i < n - 1; i += 2) { // loop unrolling: loop adresses 2 computations per iteration
		mid_val = a[i];
		val = last_val + mid_val + a[i + 1]; // reassociation, only one computation requires memory access
		p[i] = mid_val + last_val;
		p[i + 1] = val;
		last_val = val;
	}
	if (i < n) { // n is an even length, last index left unaddressed
		p[i] = last_val + a[i];
	}
}

The latency bound bounds the CPE of this function because it controls how many cycles it takes to perform operations on the floating point numbers.
The throughput bound controls how many calculations can be performed at a given time, meaning it limits the CPE because there will be a point where the programmer can no longer exploit optimization methods like loop unrolling because the machine won't be able to take in more operations. 