1. I chose to implement my linked list as a basic doubly linked list with a head and tail pointer. As a result, there are no dummy nodes, and the list is not circular. Each node contains a key, a value, a pointer to the next node, and a pointer to the previous node. If a node is the first node in the list, it contains a null pointer for the previous node, and if it is the last in the list, it contains a null pointer to the next node. If there are no nodes in the list, then the head and tail pointers are both null pointers. The list is constructed from oldest insertion to newest insertion.

2. 
~Map():
repeatedly, setting ptr to the head, while ptr is not the null pointer:
	point head to the next node
	delete ptr



Copy Constructor:
initialize empty list
if other is empty, return
create the first node
repeatedly, creating a following node, looping through other:
	make a new leading node
	set lead's last pointer to the following node
	set key and value
	set following node's next to the leading node
set the last node's next to null
set the tail



Assignment Operator:
construct a new node using other
swap the new node and this node



insert():
repeatedly:
	check list for key
	if key found:
		return false
dynamically allocate a new node
set new node's key and value
if first node:
	set new node's next and last pointers to null pointers
	set head and tail to new node
else:
	set the new node's next to null pointer
	set the new node's last to tail's current node
	set the tail's current node's next to the new node
	set the tail to the new node
increment the list's size
return true



update():
repeatedly:
	iterate through the list until the pointer hits the desired key or the end of the list
if the pointer is at the end of the list:
	return false
set the node's value to the new value
return true



erase():
repeatedly:
	iterate through the list until the pointer hits the desired key or the end of the list
if the pointer is at the end of the list:
	return false
if the item is the first in the list:
	set the head to the next value
otherwise:
	set the last node's next to the selected node's next
if the item is the last in the list:
	set the tail to the next value
otherwise:
	set the next node's last to the selected node's last
delete the selected node
decrement the size
return true



get(key, value):
repeatedly:
	iterate through the list until the pointer hits the desired key or the end of the list
if the pointer is at the end of the list:
	return false
set value to the selected node's value
return true



get(index, key, value):
initialize counter variable
repeatedly:
	iterate through the list until the pointer hits the desired key or the end of the list
if the pointer is at the end of the list or the index is negative:
	return false
set the key and value to the selected node's value
return true



combine():
initialize boolean to detect mismatched key-value pairs
initialize variables, including a temp Map
repeatedly, looping through the first map:
	get the node's key and value
	if the other map contains the key:
		get the key's paired value in the second map
		if the values are equal:
			insert into the temp Map
		otherwise:
			set the boolean to show that there is a key-value pair mismatch
	otherwise:
		insert into the temp Map
repeatedly, looping through the second map:
	get the node's key and value
	if the first map doesn't contain the key:
		insert into the temp map
set temp to the result
return if there was a mismatch or not



reassign():
initialize variables, including a temp Map
repeatedly, looping through every node except the last one:
	get the current node's key
	get the next node's value
	insert the new key-value pair into the temp Map
get the last node's key
get the first node's value
insert the new key-value pair into the temp Map
set temp to the result

3. 
Default Constructor:
Map emptyMap;
assert(emptyMap.size() == 0); // should be 0
assert(emptyMap.empty()); // a new map should be empty

empty():
Map emptyMap;
Map testMap;
testMap.insert("key1", 1);
assert(emptyMap.empty()); // a new map should be empty
assert(!testMap.empty()); // testMap is not empty

size():
Map emptyMap;
Map testMap;
testMap.insert("key1", 1);
assert(testMap.size() == 0); // testMap should have size 0
assert(testMap.size() == 1); // size() returns correct # of elements
testMap.erase();
assert(testMap.size() == 0); // size() returns correctly after erase is called

insert():
Map testMap;
assert(testMap.insert("key1", 1)); // insert() returns correctly on success
assert(!testMap.insert("key1", 1)); // insert() returns correctly on failure

update():
Map testMap;
assert(!testMap.update("key1", 1)); // update() returns correctly on failure
testMap.insert("key1", 1);
assert(testMap.update("key1", 2)); // update() returns correctly on success

insertOrUpdate():
Map testMap;
testMap.insert("key1", 1);
assert(testMap.insertOrUpdate("key2", 2)); // insertOrUpdate() returns correctly on insert success
assert(testMap.insertOrUpdate("key1", 2)); // insertOrUpdate() returns correctly on update success

erase():
Map testMap;
testMap.insert("key1", 1);
testMap.insert("key2", 2);
testMap.insert("key3", 3);
assert(testMap.erase("key2")); // erase() returns correctly on middle node
assert(testMap.erase("key1")); // erase() returns correctly on first node
assert(testMap.erase("key3")); // erase() returns correctly on last node
assert(!testMap.erase("key3")); // erase() returns correctly on failure

contains():
Map testMap;
testMap.insert("key1", 1);
assert(testMap.contains("key1")); // contains() returns correctly on success
assert(!testMap.contains("notARealKey")); // contains() returns correctly on failure

get(key, value):
Map testMap;
ValueType val = 0;
testMap.insert("key1", 1);
assert(testMap.get("key1", val)); // get() returns correctly on success
assert(val == 1); // get() maps correctly
assert(!testMap.get("notARealKey", val)); // get() returns correctly on failure
assert(val == 1); // val is unchanged

get(index, key, value):
Map testMap;
KeyType key = "";
ValueType val = 0;
testMap.insert("key1", 1);
assert(testMap.get(0, str, val)); // get() returns correctly on success
assert(str == "key1" && val == 1); // get() maps correctly
assert(!testMap.get(-1, str, val)); // get() returns correctly on negative index
assert(!testMap.get(testMap.size(), str, val)); // get() returns correctly on out of bounds index
assert(str == "key1" && val == 1); // str and val are unchanged

swap():
Map testMap;
Map emptyMap;
ValueType val = 0;
testMap.insert("key1", 1);
testMap.swap(emptyMap);
assert(testMap.empty()); // testMap is now empty
assert(!emptyMap.empty()); // emptyMap now has elements
emptyMap.get(0, str, val);
assert(str == "key1" && val == 1); // emptyMap has the correct first element
assert(emptyMap.size() == 2); // emptyMap has the correct size

combine():
Map m1; Map m2; Map m3;
m1.insert("Fred", 123); m1.insert("Ethel", 456); m1.insert("Lucy", 789);
m2.insert("Lucy", 789); m2.insert("Ricky", 321);
assert(combine(m1, m2, m3)); // combine() returns correctly on success
assert(m3.contains("Fred") && m3.contains("Ricky") && m3.contains("Ethel") && m3.contains("Lucy")); //combine() maps to result correctly
m2.update("Lucy", 654);
assert(!combine(m1, m2, m3)); // combine returns correctly on failure
assert(m3.contains("Fred") && m3.contains("Ricky") && m3.contains("Ethel") && !m3.contains("Lucy")); // combine() re-maps correctly
assert(!combine(m1, m2, m1)); // combine returns correctly when m1 and result are the same Map
assert(m1.contains("Fred") && m1.contains("Ricky") && m1.contains("Ethel") && !m1.contains("Lucy")); // combine maps correctly when m1 and result are the same Map

reassign():
Map testMap;
testMap.insert("key1", 1);
testMap.insert("key2", 2);
testMap.insert("key3", 3);
testMap.insert("key4", 4);
testMap.insert("key5", 5);
reassign(testMap, testMap);
assert(testMap.contains("key1") && testMap.contains("key2") && testMap.contains("key3") && testMap.contains("key4") && testMap.contains("key5")); // the result contains all keys from the original
emptyMap.get("key1", val); // check if any key-value pairs match the original Map's
assert(val != 1);
testMap.get("key2", val)
assert(val != 2);
testMap.get("key3", val);
assert(val != 3);
testMap.get("key4", val);
assert(val != 4);
testMap.get("key5", val);
assert(val != 5);

Assignment Operator:
Map testMap;
testMap.insert("key1", 1);
Map imEmpty;
testMap = imEmpty;
assert(testMap.size() == 0 &&  testMap.empty()); // testMap is now empty
testMap.insert("key1", 1);
testMap.insert("key2", 2);
testMap.insert("key3", 3);
testMap.insert("key4", 4);
testMap.insert("key5", 5);
imEmpty.insert("plsDontContainMe", 999);
imEmpty = testMap;
assert(imEmpty.contains("key1") && imEmpty.contains("key2") && imEmpty.contains("key3") && imEmpty.contains("key4") && imEmpty.contains("key5") && !imEmpty.contains("plsDontContainMe")); // imEmpty now contains all keys its supposed to, and doesn't contain its original key

Copy Constructor:
Map empty;
Map newMap1(empty);
assert(newMap1.size() == 0 && newMap1.empty()); // the copy constructor copies empty maps correctly
Map testMap;
testMap.insert("key1", 1);
testMap.insert("key2", 2);
testMap.insert("key3", 3);
testMap.insert("key4", 4);
testMap.insert("key5", 5);
Map newMap2(testMap);
assert(newMap2.contains("key1") && newMap2.contains("key2") && newMap2.contains("key3") && newMap2.contains("key4") && newMap2.contains("key5")); // all keys are copied over correctly

