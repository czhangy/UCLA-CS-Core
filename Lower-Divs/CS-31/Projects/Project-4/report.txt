a. I feel that for this project I didn't have any really notable obstacles. A couple times I got worried about some of my code being redundant, and I got momentarily lost on some of the logic, but neither of these issues substantially hindered my progress.

b. string g[1] = { "1" }; // single string array
    string h[10] = { "hi", "my", "name", "is", "charles" }; // odd length array
    string j[2] = { "1", "1" }; // 2 string array, 1 run
    string k[4] = { "1", "2", "3", "4" }; // even length array
    string l[3] = { "1", "1", "2" }; // 2 runs
    string m[0] = { }; // empty array
    string n[1] = { "1" }; // identical to g
    string o[7] = { "1", "hi", "my", "name", "is", "charles", "7" }; // test for subsequence
    
    // lookup Tests
    assert(lookup(g, -1, "1") == -1); // fails if n is a negative number
    assert(lookup(g, 1, "1") == 0); // successful test
    assert(lookup(g, 1, "2") == -1); // fails if the value is not found
    assert(lookup(k, 4, "3") == 2); // successful test
    
    // positionOfMax Tests
    assert(positionOfMax(g, -1) == -1); // fails if n is a negative number
    assert(positionOfMax(g, 1) == 0); // successful test
    assert(positionOfMax(k, 4) == 3); // successful test
    assert(positionOfMax(h, 5) == 2); // successful test
    
    // countRuns Tests
    assert(countRuns(g, -1) == -1); // fails if n is a negative number
    assert(countRuns(g, 1) == 1); // successful test on 1 run
    assert(countRuns(h, 5) == 5); // successful test on 5 runs, 1 long
    assert(countRuns(j, 2) == 1); // successful test on 1 run, 2 long
    assert(countRuns(l, 3) == 2); // successful test on 2 runs, varying lengths
    assert(countRuns(m, 0) == 0); // successful test on 0 runs
    
    // differ Tests
    assert(differ(g, -1, n, 1) == -1); // fails if n1 is negative
    assert(differ(g, 1, n, -1) == -1); // fails if n2 is negative
    assert(differ(g, 1, n, 1) == 1); // success on equivalent strings
    assert(differ(j, 2, l, 3) == 2); // returns lower value when one string runs out
    assert(differ(j, 2, k, 4) == 1); // returns correct position on different strings
    assert(differ(h, 5, j, 2) == 0); // returns correct position on different strings
    
    // subsequence Tests
    assert(subsequence(l, -1, j, 2) == -1); // fails when n1 is negative
    assert(subsequence(l, 3, j, -1) == -1); // fails when n2 is negative
    assert(subsequence(l, 3, j, 2) == 0); // successful test
    assert(subsequence(h, 5, j, 2) == -1); // fails when no sequence found
    assert(subsequence(j, 2, n, 1) == 0); // returns first occurrence on successful test
    assert(subsequence(o, 7, h, 5) == 1); // successful test
    assert(subsequence(m, 0, m, 0) == 0); // empty array is a subsequence of itself
    assert(subsequence(o, 7, m, 0) == 0); // empty array is a subsequence of another array
    
    // lookupAny Tests
    assert(lookupAny(g, -1, h, 5) == -1); // fails if n1 is negative
    assert(lookupAny(g, 1, h, -1) == -1); // fails if n2 is negative
    assert(lookupAny(g, 1, h, 5) == -1); // fails if none of a2 is in a1
    assert(lookupAny(o, 7, h, 5) == 1); // successful test
    
    // appendToAll Tests
    assert(appendToAll(g, -1, "!") == -1); // fails if n is a negative number
    assert(appendToAll(g, 1, "!") == 1); // correct return value
    assert(g[0] == "1!"); // correct value at position 0
    // g = { "1!" }
    
    // rotateLeft Tests
    assert(rotateLeft(g, -1, 0) == -1); // fails if n is negative
    assert(rotateLeft(g, 1, -1) == -1); // fails if pos is negative
    assert(rotateLeft(g, 1, 0) == 0); // returns correct value
    assert(g[0] == "1!"); // string at position 0 is correct
    assert(rotateLeft(k, 4, 0) == 0); // returns correct value
    assert(k[0] == "2"); // string at position 0 is correct
    assert(k[3] == "1"); // string at position 3 is correct
    assert(rotateLeft(m, 0, 0) == -1); // returns correct value for empty array
    // k = { "2", "3", "4", "1" }
    
    // flip Tests
    assert(flip(m, -1) == -1); // fails if n is negative
    assert(flip(m, 0) == 0); // returns correct value for empty array
    flip(g, 1);
    assert(flip(k, 4) == 4); // returns correct value
    flip(l, 3);
    assert(g[0] == "1!"); // successful on array with length 1
    assert(k[2] == "3"); // successful on array with even length
    assert(l[0] == "2"); // successful on array with odd length
    
    // separate Tests
    assert(separate(m, -1, "d") == -1); // fails if n is negative
    assert(separate(m, 0, "d") == 0); // successful on empty array
    assert(separate(h, 5, "j") == 3); // successful return value
    assert(h[0] == "hi" && h[1] == "is" && h[2] == "charles"); // correct array values