1. a) int main() {
	int arr[3] = { 5, 10, 15 };
      	int* ptr = arr;

    	*ptr = 30;          // set arr[0] to 30
    	*(ptr + 1) = 20;      // set arr[1] to 20
    	ptr += 2;
    	*ptr = 10;        // set arr[2] to 10
   	ptr = arr;
   	while (ptr < arr + 3) {
        	cout << *ptr << endl;    // print values
        	ptr++;
   	}
      }

   b) The pointer is only passed by value, therefore it will not be changed within the main function. It needs to be passed by reference.
      void findMax(int arr[], int n, int*& pToMax) {
    	if (n <= 0) {
        	return;      // no items, no maximum!
	}

    	pToMax = arr;

    	for (int i = 1; i < n; i++) {
        	if (arr[i] > *pToMax) {
            		pToMax = arr + i;
		}
   	}	
      }

      int main() {
    	int nums[4] = { 5, 3, 15, 6 };
    	int* ptr;

    	findMax(nums, 4, ptr);
    	cout << "The maximum is at address " << ptr << endl;
    	cout << "It's at position " << ptr - nums << endl;
    	cout << "Its value is " << *ptr << endl;
      }

   c) The pointer ptr is uninitialized, and therefore doesn't point to anything. It needs to be initialized to point at a variable that contains the value 5.
      void computeCube(int n, int* ncubed) {
    	*ncubed = n * n * n;
      }

      int main() {
    	int num = 5;
    	int* ptr = &num;
    	computeCube(num, ptr);
    	cout << "Five cubed is " << *ptr << endl;
      }

   d) The current implementation generates an infinite loop, as the pointers pointing to str1 and str2 are never guaranteed to be equal to 0. It also compares pointers pointing to the first element of str1 and str2, not the characters in those positions.

      bool strequal(const char str1[], const char str2[]) {
	while (*str1 != '\0'  &&  *str2 != '\0') {
        	if (*str1 != *str2) { // compare corresponding characters
             		return false;
         	}
            	str1++;            // advance to the next character
            	str2++;
        }
        return *str1 == *str2;   // both ended at same time?
      }

   e) The array anArray only exists in the scope of the function getPtrToArray, and therefore, when a pointer is created that points to the memory location of the array, it isn't guaranteed to preserve the same values outside of the function. As a result, when f() is called, it rewrites values to the same memory location, and the incorrect values are printed out.

2. a) double* cat;
   b) double mouse[5];
   c) cat = &mouse[4];
   d) *cat = 25;
   e) *(mouse + 3) = 54;
   f) cat = cat - 3;
   g) cat[1] = 27;
   h) cat[0] = 42;
   i) bool b = *cat == *(cat + 1);
   j) bool d = cat == mouse

3. a) double mean(const double* scores, int numScores) {
     	const double* ptr = scores;
     	double tot = 0;
     	int i = 0;
     	while (ptr + i != scores + numScores) {
         	tot += *(ptr + i);
         	i++;
    	}
     	return tot/numScores;
      }

   b) const char* findTheChar(const char str[], char chr) {
     	for (int k = 0; str[k] != 0; k++) {
         	if (*(str + k) == chr) {
             	return str + k;
         	}
     	}
     	return nullptr;
      }

   c) const char* findTheChar(const char str[], char chr) {
     	for (; *str != '\0'; str++) {
         	if (*str == chr) {
             	return str;
         	}
     	}
     	return nullptr;
      }

4. The first output will be 3. This is because the code before the first cout initializes ptr to the greater value between the position 0 of the array and position 2 of the array, which ends up being position 0. It then increments the position by 2, which means it is now pointing at position 2 of the array. Finally, when the address of position 5 and the address of position 2 of the array are subtracted, the result will be the difference in the positions, which will be 3.
   In the first block of code, when the pointer is pointing at position 0, the value ptr is pointing at is changed to -1. After being incremented by 2, the position following the position ptr is pointing at (position 2 of the array) is changed to 9. Finally, the value at array + 1, which is position 1 of the array, is changed to 79. At this point, the array is { -1, 79, 4, 9, 22, 19 }. Then, the code executes the swap1 and swap2 functions. swap1 has no effect on the array, as the changes it makes to the pointers only exist within the scope of the function. swap2 takes position 0 of the array and position 2 of the array and swaps the values at those locations. This change does exist outside of the function's scope, as arrays are passed by reference by default. This leaves the array containing the values { 4, 79, -1, 9, 22, 19 }, which would then be printed out in order on separate lines.

5. void removeS(char* ptr) {
    for (; *ptr != '\0'; ptr++) {
        if (*ptr == 's' || *ptr == 'S') {
            for (char* i = ptr; *i != '\0'; i++) {
                *i = *(i + 1);
            }
            ptr--;
        }
    }
   }
